---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.app.name }}
  namespace: {{ .Values.deployment.namespace }}
  labels:
    app.kubernetes.io/name: {{ .Values.app.name }}
    app.kubernetes.io/version: {{ .Values.app.version }}
    app.kubernetes.io/release: {{ .Values.app.release }}
    app.kubernetes.io/track: {{ .Values.app.track }}
    app.kubernetes.io/component: {{ .Values.app.component }}
    app.kubernetes.io/tier: {{ .Values.app.tier }}
    app.kubernetes.io/runtime: {{ .Values.app.runtime }}
    app.kubernetes.io/enviroment: {{ .Values.app.enviroment}}
spec:
  replicas: {{ .Values.deployment.replicas }}
  revisionHistoryLimit: {{ .Values.deployment.revisionHistoryLimit }}
  progressDeadlineSeconds: 600
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: "25%"
      maxUnavailable: "25%"
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Values.app.name }}
      app.kubernetes.io/version: {{ .Values.app.version }}
      app.kubernetes.io/release: {{ .Values.app.release }}
      app.kubernetes.io/track: {{ .Values.app.track }}
      app.kubernetes.io/component: {{ .Values.app.component }}
      app.kubernetes.io/tier: {{ .Values.app.tier }}
      app.kubernetes.io/runtime: {{ .Values.app.runtime }}
      app.kubernetes.io/enviroment: {{ .Values.app.enviroment}}
  template:
    metadata:
      name: {{ .Values.app.name }}
      namespace: dev
      labels:
        app.kubernetes.io/name: {{ .Values.app.name }}
        app.kubernetes.io/version: {{ .Values.app.version }}
        app.kubernetes.io/release: {{ .Values.app.release }}
        app.kubernetes.io/track: {{ .Values.app.track }}
        app.kubernetes.io/component: {{ .Values.app.component }}
        app.kubernetes.io/tier: {{ .Values.app.tier }}
        app.kubernetes.io/runtime: {{ .Values.app.runtime }}
        app.kubernetes.io/enviroment: {{ .Values.app.enviroment}}
    spec:
      hostname: {{ .Values.app.name }}
      restartPolicy: {{ .Values.deployment.restartPolicy }}
      {{- if .Values.securityContext.enabled }}
      securityContext:
        runAsNonRoot: true
      {{- end }}
      containers:
        - name: {{ .Values.app.name }}
          image: "{{ .Values.docker.registry }}/{{ .Values.app.name }}:{{ .Values.docker.image.tag }}"
          imagePullPolicy: {{ .Values.docker.image.imagePullPolicy }}
          resources:
            requests:
              cpu: {{ .Values.docker.resources.requests.cpu }}
              memory: {{ .Values.docker.resources.requests.memory }}
            limits:
              cpu: {{ .Values.docker.resources.limits.cpu }}
              memory: {{ .Values.docker.resources.limits.memory }}
#          env:
          workdir: {{ .Values.docker.workdir }}
          command: {{ }}
          ports:
            - name: server
              protocol: TCP
              containerPort: 8109
          livenessProbe:
            tcpSocket:
              port: 8109
            initialDelaySeconds: 5
            periodSeconds: 30
            timeoutSeconds: 3
          readinessProbe:
            tcpSocket:
              port: 8109
            initialDelaySeconds: 5
            periodSeconds: 30
            timeoutSeconds: 3
      volumes:
        - name: data
          emptyDir: {}
...