apiVersion: v1
kind: ConfigMap
metadata:
  name: skywalking
  namespace: kube-monitoring
  labels:
    app.kubernetes.io/name: skywalking
    app.kubernetes.io/version: "8.9.0"
    app.kubernetes.io/tier: middleware
    app.kubernetes.io/enviroment: kube-monitoring
    app.kubernetes.io/component: apm
data:
  application.yml: |
    cluster:
      selector: ${SW_CLUSTER:standalone}
      standalone:
    core:
      selector: ${SW_CORE:default}
      default:
        role: ${SW_CORE_ROLE:Mixed} # Mixed/Receiver/Aggregator
        restHost: ${SW_CORE_REST_HOST:0.0.0.0}
        restPort: ${SW_CORE_REST_PORT:12800}
        restContextPath: ${SW_CORE_REST_CONTEXT_PATH:/}
        restMinThreads: ${SW_CORE_REST_JETTY_MIN_THREADS:1}
        restMaxThreads: ${SW_CORE_REST_JETTY_MAX_THREADS:200}
        restIdleTimeOut: ${SW_CORE_REST_JETTY_IDLE_TIMEOUT:30000}
        restAcceptorPriorityDelta: ${SW_CORE_REST_JETTY_DELTA:0}
        restAcceptQueueSize: ${SW_CORE_REST_JETTY_QUEUE_SIZE:0}
        httpMaxRequestHeaderSize: ${SW_CORE_HTTP_MAX_REQUEST_HEADER_SIZE:8192}
        gRPCHost: ${SW_CORE_GRPC_HOST:0.0.0.0}
        gRPCPort: ${SW_CORE_GRPC_PORT:11800}
        maxConcurrentCallsPerConnection: ${SW_CORE_GRPC_MAX_CONCURRENT_CALL:0}
        maxMessageSize: ${SW_CORE_GRPC_MAX_MESSAGE_SIZE:0}
        gRPCThreadPoolQueueSize: ${SW_CORE_GRPC_POOL_QUEUE_SIZE:-1}
        gRPCThreadPoolSize: ${SW_CORE_GRPC_THREAD_POOL_SIZE:-1}
        gRPCSslEnabled: ${SW_CORE_GRPC_SSL_ENABLED:false}
        gRPCSslKeyPath: ${SW_CORE_GRPC_SSL_KEY_PATH:""}
        gRPCSslCertChainPath: ${SW_CORE_GRPC_SSL_CERT_CHAIN_PATH:""}
        gRPCSslTrustedCAPath: ${SW_CORE_GRPC_SSL_TRUSTED_CA_PATH:""}
        downsampling:
          - Hour
          - Day
        # Set a timeout on metrics data. After the timeout has expired, the metrics data will automatically be deleted.
        enableDataKeeperExecutor: ${SW_CORE_ENABLE_DATA_KEEPER_EXECUTOR:true} # Turn it off then automatically metrics data delete will be close.
        dataKeeperExecutePeriod: ${SW_CORE_DATA_KEEPER_EXECUTE_PERIOD:5} # How often the data keeper executor runs periodically, unit is minute
        recordDataTTL: ${SW_CORE_RECORD_DATA_TTL:2} # Unit is day
        metricsDataTTL: ${SW_CORE_METRICS_DATA_TTL:2} # Unit is day
        # The period of L1 aggregation flush to L2 aggregation. Unit is ms.
        l1FlushPeriod: ${SW_CORE_L1_AGGREGATION_FLUSH_PERIOD:500}
        # The threshold of session time. Unit is ms. Default value is 70s.
        storageSessionTimeout: ${SW_CORE_STORAGE_SESSION_TIMEOUT:70000}
        # Cache metrics data for 1 minute to reduce database queries, and if the OAP cluster changes within that minute,
        # the metrics may not be accurate within that minute.
        enableDatabaseSession: ${SW_CORE_ENABLE_DATABASE_SESSION:true}
        topNReportPeriod: ${SW_CORE_TOPN_REPORT_PERIOD:10} # top_n record worker report cycle, unit is minute
        # Extra model column are the column defined by in the codes, These columns of model are not required logically in aggregation or further query,
        # and it will cause more load for memory, network of OAP and storage.
        # But, being activated, user could see the name in the storage entities, which make users easier to use 3rd party tool, such as Kibana->ES, to query the data by themselves.
        activeExtraModelColumns: ${SW_CORE_ACTIVE_EXTRA_MODEL_COLUMNS:false}
        # The max length of service + instance names should be less than 200
        serviceNameMaxLength: ${SW_SERVICE_NAME_MAX_LENGTH:70}
        instanceNameMaxLength: ${SW_INSTANCE_NAME_MAX_LENGTH:70}
        # The max length of service + endpoint names should be less than 240
        endpointNameMaxLength: ${SW_ENDPOINT_NAME_MAX_LENGTH:150}
        # Define the set of span tag keys, which should be searchable through the GraphQL.
        searchableTracesTags: ${SW_SEARCHABLE_TAG_KEYS:http.method,status_code,db.type,db.instance,mq.queue,mq.topic,mq.broker}
        # Define the set of log tag keys, which should be searchable through the GraphQL.
        searchableLogsTags: ${SW_SEARCHABLE_LOGS_TAG_KEYS:level}
        # Define the set of alarm tag keys, which should be searchable through the GraphQL.
        searchableAlarmTags: ${SW_SEARCHABLE_ALARM_TAG_KEYS:level}
        # The number of threads used to prepare metrics data to the storage.
        prepareThreads: ${SW_CORE_PREPARE_THREADS:2}
        # Turn it on then automatically grouping endpoint by the given OpenAPI definitions.
        enableEndpointNameGroupingByOpenapi: ${SW_CORE_ENABLE_ENDPOINT_NAME_GROUPING_BY_OPAENAPI:true}
    storage:
      selector: ${SW_STORAGE:mysql}
      mysql:
        properties:
          jdbcUrl: ${SW_JDBC_URL:""}
          dataSource.user: ${SW_DATA_SOURCE_USER:}
          dataSource.password: ${SW_DATA_SOURCE_PASSWORD:}
          dataSource.cachePrepStmts: ${SW_DATA_SOURCE_CACHE_PREP_STMTS:true}
          dataSource.prepStmtCacheSize: ${SW_DATA_SOURCE_PREP_STMT_CACHE_SQL_SIZE:250}
          dataSource.prepStmtCacheSqlLimit: ${SW_DATA_SOURCE_PREP_STMT_CACHE_SQL_LIMIT:2048}
          dataSource.useServerPrepStmts: ${SW_DATA_SOURCE_USE_SERVER_PREP_STMTS:true}
        metadataQueryMaxSize: ${SW_STORAGE_MYSQL_QUERY_MAX_SIZE:5000}
        maxSizeOfArrayColumn: ${SW_STORAGE_MAX_SIZE_OF_ARRAY_COLUMN:20}
        numOfSearchableValuesPerTag: ${SW_STORAGE_NUM_OF_SEARCHABLE_VALUES_PER_TAG:2}
        maxSizeOfBatchSql: ${SW_STORAGE_MAX_SIZE_OF_BATCH_SQL:2000}
        asyncBatchPersistentPoolSize: ${SW_STORAGE_ASYNC_BATCH_PERSISTENT_POOL_SIZE:4}

    agent-analyzer:
      selector: ${SW_AGENT_ANALYZER:default}
      default:
        # The default sampling rate and the default trace latency time configured by the 'traceSamplingPolicySettingsFile' file.
        traceSamplingPolicySettingsFile: ${SW_TRACE_SAMPLING_POLICY_SETTINGS_FILE:trace-sampling-policy-settings.yml}
        slowDBAccessThreshold: ${SW_SLOW_DB_THRESHOLD:default:200,mongodb:100} # The slow database access thresholds. Unit ms.
        forceSampleErrorSegment: ${SW_FORCE_SAMPLE_ERROR_SEGMENT:true} # When sampling mechanism active, this config can open(true) force save some error segment. true is default.
        segmentStatusAnalysisStrategy: ${SW_SEGMENT_STATUS_ANALYSIS_STRATEGY:FROM_SPAN_STATUS} # Determine the final segment status from the status of spans. Available values are `FROM_SPAN_STATUS` , `FROM_ENTRY_SPAN` and `FROM_FIRST_SPAN`. `FROM_SPAN_STATUS` represents the segment status would be error if any span is in error status. `FROM_ENTRY_SPAN` means the segment status would be determined by the status of entry spans only. `FROM_FIRST_SPAN` means the segment status would be determined by the status of the first span only.
        # Nginx and Envoy agents can't get the real remote address.
        # Exit spans with the component in the list would not generate the client-side instance relation metrics.
        noUpstreamRealAddressAgents: ${SW_NO_UPSTREAM_REAL_ADDRESS:6000,9000}
        meterAnalyzerActiveFiles: ${SW_METER_ANALYZER_ACTIVE_FILES:} # Which files could be meter analyzed, files split by ","

    log-analyzer:
      selector: ${SW_LOG_ANALYZER:default}
      default:
        lalFiles: ${SW_LOG_LAL_FILES:default}
        malFiles: ${SW_LOG_MAL_FILES:""}

    event-analyzer:
      selector: ${SW_EVENT_ANALYZER:default}
      default:

    receiver-sharing-server:
      selector: ${SW_RECEIVER_SHARING_SERVER:default}
      default:
        # For Jetty server
        restHost: ${SW_RECEIVER_SHARING_REST_HOST:0.0.0.0}
        restPort: ${SW_RECEIVER_SHARING_REST_PORT:0}
        restContextPath: ${SW_RECEIVER_SHARING_REST_CONTEXT_PATH:/}
        restMinThreads: ${SW_RECEIVER_SHARING_JETTY_MIN_THREADS:1}
        restMaxThreads: ${SW_RECEIVER_SHARING_JETTY_MAX_THREADS:200}
        restIdleTimeOut: ${SW_RECEIVER_SHARING_JETTY_IDLE_TIMEOUT:30000}
        restAcceptorPriorityDelta: ${SW_RECEIVER_SHARING_JETTY_DELTA:0}
        restAcceptQueueSize: ${SW_RECEIVER_SHARING_JETTY_QUEUE_SIZE:0}
        httpMaxRequestHeaderSize: ${SW_RECEIVER_SHARING_HTTP_MAX_REQUEST_HEADER_SIZE:8192}
        # For gRPC server
        gRPCHost: ${SW_RECEIVER_GRPC_HOST:0.0.0.0}
        gRPCPort: ${SW_RECEIVER_GRPC_PORT:0}
        maxConcurrentCallsPerConnection: ${SW_RECEIVER_GRPC_MAX_CONCURRENT_CALL:0}
        maxMessageSize: ${SW_RECEIVER_GRPC_MAX_MESSAGE_SIZE:0}
        gRPCThreadPoolQueueSize: ${SW_RECEIVER_GRPC_POOL_QUEUE_SIZE:0}
        gRPCThreadPoolSize: ${SW_RECEIVER_GRPC_THREAD_POOL_SIZE:0}
        gRPCSslEnabled: ${SW_RECEIVER_GRPC_SSL_ENABLED:false}
        gRPCSslKeyPath: ${SW_RECEIVER_GRPC_SSL_KEY_PATH:""}
        gRPCSslCertChainPath: ${SW_RECEIVER_GRPC_SSL_CERT_CHAIN_PATH:""}
        gRPCSslTrustedCAsPath: ${SW_RECEIVER_GRPC_SSL_TRUSTED_CAS_PATH:""}
        authentication: ${SW_AUTHENTICATION:""}
    receiver-register:
      selector: ${SW_RECEIVER_REGISTER:default}
      default:

    receiver-trace:
      selector: ${SW_RECEIVER_TRACE:default}
      default:

    receiver-jvm:
      selector: ${SW_RECEIVER_JVM:default}
      default:

    receiver-clr:
      selector: ${SW_RECEIVER_CLR:default}
      default:

    receiver-profile:
      selector: ${SW_RECEIVER_PROFILE:default}
      default:

    service-mesh:
      selector: ${SW_SERVICE_MESH:default}
      default:

    envoy-metric:
      selector: ${SW_ENVOY_METRIC:default}
      default:
        acceptMetricsService: ${SW_ENVOY_METRIC_SERVICE:true}
        alsHTTPAnalysis: ${SW_ENVOY_METRIC_ALS_HTTP_ANALYSIS:""}
        alsTCPAnalysis: ${SW_ENVOY_METRIC_ALS_TCP_ANALYSIS:""}
        k8sServiceNameRule: ${K8S_SERVICE_NAME_RULE:"${pod.metadata.labels.(service.istio.io/canonical-name)}"}

    receiver-meter:
      selector: ${SW_RECEIVER_METER:default}
      default:

    receiver-browser:
      selector: ${SW_RECEIVER_BROWSER:default}
      default:
        # The sample rate precision is 1/10000. 10000 means 100% sample in default.
        sampleRate: ${SW_RECEIVER_BROWSER_SAMPLE_RATE:10000}

    receiver-log:
      selector: ${SW_RECEIVER_LOG:default}
      default:

    query:
      selector: ${SW_QUERY:graphql}
      graphql:
        path: ${SW_QUERY_GRAPHQL_PATH:/graphql}
        enableLogTestTool: ${SW_QUERY_GRAPHQL_ENABLE_LOG_TEST_TOOL:false}

    alarm:
      selector: ${SW_ALARM:default}
      default:

    telemetry:
      selector: ${SW_TELEMETRY:none}
      none:
      prometheus:
        host: ${SW_TELEMETRY_PROMETHEUS_HOST:0.0.0.0}
        port: ${SW_TELEMETRY_PROMETHEUS_PORT:1234}
        sslEnabled: ${SW_TELEMETRY_PROMETHEUS_SSL_ENABLED:false}
        sslKeyPath: ${SW_TELEMETRY_PROMETHEUS_SSL_KEY_PATH:""}
        sslCertChainPath: ${SW_TELEMETRY_PROMETHEUS_SSL_CERT_CHAIN_PATH:""}

    configuration:
      selector: ${SW_CONFIGURATION:none}
      none:
      grpc:
        host: ${SW_DCS_SERVER_HOST:""}
        port: ${SW_DCS_SERVER_PORT:80}
        clusterName: ${SW_DCS_CLUSTER_NAME:SkyWalking}
        period: ${SW_DCS_PERIOD:20}

    exporter:
      selector: ${SW_EXPORTER:-}
      grpc:
        targetHost: ${SW_EXPORTER_GRPC_HOST:127.0.0.1}
        targetPort: ${SW_EXPORTER_GRPC_PORT:9870}

    health-checker:
      selector: ${SW_HEALTH_CHECKER:-}
      default:
        checkIntervalSeconds: ${SW_HEALTH_CHECKER_INTERVAL_SECONDS:5}

    configuration-discovery:
      selector: ${SW_CONFIGURATION_DISCOVERY:default}
      default:
        disableMessageDigest: ${SW_DISABLE_MESSAGE_DIGEST:false}

    receiver-event:
      selector: ${SW_RECEIVER_EVENT:default}
      default:
  webapp.yml: |
    server:
      port: 8080
    spring:
      cloud:
        gateway:
          routes:
            - id: oap-route
              uri: lb://oap-service
              predicates:
                - Path=/graphql/**
        discovery:
          client:
            simple:
              instances:
                oap-service:
                  - uri: http://skywalking:12800
      mvc:
        throw-exception-if-no-handler-found: true
      web:
        resources:
          add-mappings: true
    management:
      server:
        base-path: /manage
  logback.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <!--
      ~ Licensed to the Apache Software Foundation (ASF) under one or more
      ~ contributor license agreements.  See the NOTICE file distributed with
      ~ this work for additional information regarding copyright ownership.
      ~ The ASF licenses this file to You under the Apache License, Version 2.0
      ~ (the "License"); you may not use this file except in compliance with
      ~ the License.  You may obtain a copy of the License at
      ~
      ~     http://www.apache.org/licenses/LICENSE-2.0
      ~
      ~ Unless required by applicable law or agreed to in writing, software
      ~ distributed under the License is distributed on an "AS IS" BASIS,
      ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      ~ See the License for the specific language governing permissions and
      ~ limitations under the License.
      ~
      -->
    <configuration>
        <include resource="org/springframework/boot/logging/logback/base.xml"/>
    </configuration>
